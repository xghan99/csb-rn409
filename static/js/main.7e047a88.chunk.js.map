{"version":3,"sources":["components/TaskManager.js","components/Header.js","App.js","index.js"],"names":["TaskManager","useState","tasks","setTasks","newTaskText","setNewTaskText","needwant","setNeedWant","amount","setAmount","onSubmit","event","preventDefault","description","newTasks","console","log","addTask","style","margin","type","value","onChange","target","name","width","map","task","index","OverviewBox","setName","className","role","onClick","newName","prompt","class","Header","display","flexFlow","justifyContent","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yMA4HeA,MAzHf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA4BN,qBAA5B,mBAAOO,EAAP,KAAeC,EAAf,KA+BA,OACE,qCACE,gCACE,8CACA,uBAAMC,SA9BZ,SAAuBC,GAKrBA,EAAMC,iBAIR,SAAiBC,GACf,IAAMC,EAAQ,sBAKTZ,GALS,CAMZ,CACEW,YAAaA,EACbP,SAAUA,EACVE,OAAQA,KAGZL,EAASW,GACTC,QAAQC,IAAIF,GAjBZG,CAAQb,IAwBJ,UACE,6CAEE,uBACEc,MAAO,CAAEC,OAAQ,UACjBC,KAAK,OACLC,MAAOjB,EAIPkB,SAAU,SAACX,GAAD,OAAWN,EAAeM,EAAMY,OAAOF,UAEnD,uBACEH,MAAO,CAAEC,OAAQ,UACjBC,KAAK,OACLC,MAAOb,EAIPc,SAAU,SAACX,GAAD,OAAWF,EAAUE,EAAMY,OAAOF,aAGhD,yCAEE,uBACEH,MAAO,CAAEC,OAAQ,UACjBC,KAAK,QACLC,MAAOf,EACPgB,SAAU,SAACX,GAAD,OAAWJ,EAAY,SACjCiB,KAAK,iBAMT,yCAEE,uBACEN,MAAO,CAAEC,OAAQ,UACjBC,KAAK,QACLC,MAAOf,EACPkB,KAAK,YACLF,SAAU,SAACX,GAAD,OAAWJ,EAAY,cAMrC,uBAAOa,KAAK,SAASC,MAAM,cAI/B,gCACE,yCACA,wBAAOH,MAAO,CAAEC,OAAQ,SAAUM,MAAO,QAAzC,UACE,gCACE,+BACE,qCACA,6CACA,wCACA,gDAGJ,gCACGvB,EAAMwB,KAAI,SAACC,EAAMC,GAAP,OAIT,cAHA,CAGA,gBACE,6BAAKA,EAAQ,IACb,6BAAKD,EAAKd,cACV,mCAAMc,EAAKnB,UACX,6BAAKmB,EAAKrB,aAJHqB,EAAKd,4BC1F5B,SAASgB,IACP,MAAwB5B,mBAAS,YAAjC,mBAAOuB,EAAP,KAAaM,EAAb,KAEA,OACE,sBAAKC,UAAU,YAAf,UACE,0CACA,8CACgB,IACd,wBACEC,KAAK,SACLC,QAAS,WACP,IAAMC,EAAUC,OAAO,qBAAsBX,GAC7CM,EAAQI,IAJZ,SAOGV,GAAQ,iBATb,OAaA,mBAAGY,MAAM,aAKAC,MAzCf,WACE,OACE,mCACE,kDACA,qBACEnB,MAAO,CACLoB,QAAS,OACTC,SAAU,aACVC,eAAgB,UAJpB,SAOE,cAACX,EAAD,U,MCTO,SAASY,IACtB,OACE,sBAAKV,UAAU,MAAf,UACE,cAAC,EAAD,IACA,+BACE,cAAC,EAAD,SCLR,IAAMW,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACL,EAAD,MAEFC,K","file":"static/js/main.7e047a88.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./Header\";\n\nfunction TaskManager() {\n  const [tasks, setTasks] = useState([]);\n  const [newTaskText, setNewTaskText] = useState(\"\");\n  const [needwant, setNeedWant] = useState(\"\");\n  const [amount, setAmount] = useState();\n  //const totalamount = tasks.reduce ((total,task)=> {return total+ +task.amount;},0);\n\n  //const total=document.querySelector(\".total\")\n  //total.textContent = totalamount\n  function handleAddTask(event) {\n    // React honours default browser behavior and the\n    // default behaviour for a form submission is to\n    // submit AND refresh the page. So we override the\n    // default behaviour here as we don't want to refresh\n    event.preventDefault();\n    addTask(newTaskText);\n  }\n\n  function addTask(description) {\n    const newTasks = [\n      // the ... operator is called the spread operator\n      // what we are doing is creating a brand new array of\n      // tasks, that is different from the previous array\n      // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n      ...tasks,\n      {\n        description: description,\n        needwant: needwant,\n        amount: amount\n      }\n    ];\n    setTasks(newTasks);\n    console.log(newTasks);\n  }\n\n  return (\n    <>\n      <div>\n        <h2>Add Expenses</h2>\n        <form onSubmit={handleAddTask}>\n          <label>\n            Expense:\n            <input\n              style={{ margin: \"0 1rem\" }}\n              type=\"text\"\n              value={newTaskText}\n              // how do you know it's event.target.value? it just is.\n              // search it up on MDN, and view react code samples\n              // See: https://reactjs.org/docs/forms.html\n              onChange={(event) => setNewTaskText(event.target.value)}\n            />\n            <input\n              style={{ margin: \"0 1rem\" }}\n              type=\"text\"\n              value={amount}\n              // how do you know it's event.target.value? it just is.\n              // search it up on MDN, and view react code samples\n              // See: https://reactjs.org/docs/forms.html\n              onChange={(event) => setAmount(event.target.value)}\n            />\n          </label>\n          <label>\n            Need\n            <input\n              style={{ margin: \"0 1rem\" }}\n              type=\"radio\"\n              value={needwant}\n              onChange={(event) => setNeedWant(\"Need\")}\n              name=\"need-want\"\n              // how do you know it's event.target.value? it just is.\n              // search it up on MDN, and view react code samples\n              // See: https://reactjs.org/docs/forms.html\n            />\n          </label>\n          <label>\n            Want\n            <input\n              style={{ margin: \"0 1rem\" }}\n              type=\"radio\"\n              value={needwant}\n              name=\"need-want\"\n              onChange={(event) => setNeedWant(\"Want\")}\n              // how do you know it's event.target.value? it just is.\n              // search it up on MDN, and view react code samples\n              // See: https://reactjs.org/docs/forms.html\n            />\n          </label>\n          <input type=\"submit\" value=\"Add\" />\n        </form>\n      </div>\n\n      <div>\n        <h2>Expense</h2>\n        <table style={{ margin: \"0 auto\", width: \"100%\" }}>\n          <thead>\n            <tr>\n              <th>No.</th>\n              <th>Description</th>\n              <th>Amount</th>\n              <th>Need/Want</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tasks.map((task, index) => (\n              // We should specify key here to help react identify\n              // what has updated\n              // https://reactjs.org/docs/lists-and-keys.html#keys\n              <tr key={task.description}>\n                <td>{index + 1}</td>\n                <td>{task.description}</td>\n                <td>${task.amount}</td>\n                <td>{task.needwant}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n}\n\nexport default TaskManager;\n","import { useState } from \"react\";\nimport TaskManager from \"./TaskManager\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>Expense Tracking</h1>\n      <div\n        style={{\n          display: \"flex\",\n          flexFlow: \"row nowrap\",\n          justifyContent: \"center\"\n        }}\n      >\n        <OverviewBox />\n      </div>\n    </header>\n  );\n}\n\nfunction OverviewBox() {\n  const [name, setName] = useState(\"John Doe\");\n\n  return (\n    <div className=\"HeaderBox\">\n      <h2>Overview</h2>\n      <p>\n        Welcome back,{\" \"}\n        <strong\n          role=\"button\"\n          onClick={() => {\n            const newName = prompt(\"What is your name?\", name);\n            setName(newName);\n          }}\n        >\n          {name || \"<set a name>\"}\n        </strong>\n        !\n      </p>\n      <p class=\"total\"></p>\n    </div>\n  );\n}\n\nexport default Header;\n","import Header from \"./components/Header\";\nimport TaskManager from \"./components/TaskManager\";\n\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <TaskManager />\n      </main>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}